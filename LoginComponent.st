'From Pharo4.0 of 18 March 2013 [Latest update: #40622] on 3 January 2016 at 4:34:26.002708 pm'!WAComponent subclass: #LoginComponent	instanceVariableNames: 'model debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!LoginComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!LoginComponent methodsFor: 'initialize' stamp: 'Euge 1/3/2016 15:06'!initialize		super initialize.	model := User new.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/2/2016 23:33'!renderRegisterOn: html	html div		id: 'register';		class: 'seccion';		with: [ 					html text: 'do you don''t have an account?'.					html space.					html anchor						callback: [ self call: RegisterComponent new];						with: 'register'.				].! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:35'!checkUser	debug:= 'llego al chequeo'.	^ User validateUserName: model name andPass: model password! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:31'!renderNameOn: html	html text: 'Name: '.	html space.	html textInput callback: [ :value | model name: value ].	html break.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:31'!renderPasswordOn: html	html text: 'Password:'.	html space.	html passwordInput callback: [ :value | model password: value ].	html break.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:54'!renderContentOn: html	self renderLoginOn: html.	self renderRegisterOn: html.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 16:14'!renderLoginOn: html	html div 		id:'login';		class:'seccion';		with:[ 			html form: [  					self renderNameOn: html;					renderPasswordOn: html;					renderSubmitButtonOn: html.				].			].! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:57'!loginUser	debug:= 'llego al login'.	self checkUser		ifTrue: [ self session user: model.						debug:= 'logueado']		ifFalse: [  debug:= 'fallo logueo']! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 16:11'!renderSubmitButtonOn: html	html submitButton 		callback: [ 			debug:='apreto el callback'.			self loginUser.			];		with: 'Login'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginComponent class	instanceVariableNames: ''!!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/27/2015 20:23'!canBeRoot	^ true! !