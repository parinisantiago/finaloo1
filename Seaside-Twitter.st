Object subclass: #User	instanceVariableNames: 'name password tweets retweets favourites friends'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	favourites:		<Object>	friends:		<Object>	name:		<Object>	pass:		<Object>	retweets:		<Object>	tweets:		<Object>    Implementation Points!!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!tweets	^ tweets! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!friends	^ friends! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!retweets	^ retweets! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!favourites	^ favourites! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/3/2016 21:21'!initialize	tweets := OrderedCollection new.	favourites := OrderedCollection new.	retweets := OrderedCollection new.! !!User methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:21'!password: aPass	password:= aPass! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/3/2016 21:07'!addTweet: aTweet	tweets add: aTweet.! !!User methodsFor: 'accesing' stamp: 'Euge 12/31/2015 21:10'!password	^password! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name: aName	name:= aName! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name	^name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: 'users'!!User class methodsFor: 'session management' stamp: 'Euge 1/3/2016 15:17'!validateUserName: aName andPass: aPass	^self users anySatisfy: [ :each | each name=aName and: [ each password = aPass ] ].! !!User class methodsFor: 'adding/removing users' stamp: 'Euge 1/3/2016 12:36'!userExist: anUser	^ self users anySatisfy: [ :unUsuario |anUser name = unUsuario name].! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/6/2016 02:44'!addUser: anUser	^((self userExist: anUser) ifFalse: [users add: anUser]).! !!User class methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:24'!users	users ifNil: [ 		users:= OrderedCollection new.				].	^users.! !Object subclass: #Tweet	instanceVariableNames: 'text owner'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!Tweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>	reference:		<Object>	text:		<Object>    Implementation Points!!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 03:58'!text: anObject	text := anObject.	self hashtags do:[ :each | Hashtag addTweet: self Hashtag: each ]! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:08'!initialize	text := ''.! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:17'!text	^ text! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:07'!reference	^ self text allRegexMatches: '@\w+'! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner	^ owner! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner: anObject	owner := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:07'!hashtags	^ self text allRegexMatches: '#\w+'! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!ownerName	^ owner name! !WAComponent subclass: #TweetFormComponent	instanceVariableNames: 'tweet'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetFormComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	tweet:		<Object>    Implementation Points!!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 16:42'!renderUserOn: html	html text: 'Usuario:'.	html space.	html text: self session user name.	html break.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:11'!initialize	super initialize.	tweet := Tweet new.	tweet owner: self session user.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 21:54'!renderSubmitButtonOn: html	html submitButton		callback: [ self session user addTweet: tweet. ];		with: 'Tweet nigga!!'.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 21:15'!renderTweetOn: html	html text: 'Texto: '.	html space.	html textInput callback: [ :value | tweet text: value. ].	html break.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 16:43'!renderContentOn: html	|debug|	html heading: 'Tweeteate algo...'.	html form: [				self renderUserOn: html;					renderTweetOn: html;					renderSubmitButtonOn: html.				].	debug := tweet.! !WAComponent subclass: #MainComponent	instanceVariableNames: 'mainArea menuArea'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!MainComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	mainArea:		<Object>	menuArea:		<Object>    Implementation Points!!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:31'!renderPerfilOn: html	^ html anchor		callback: [ mainArea := TweetListComponent new ];		with: 'Profile'! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:39'!renderMainAreaOn: html	html div		id: 'mainArea';		class: 'seccion';		with: [ html render: mainArea ]! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 19:44'!renderLoginOn: html	html anchor		callback: [ mainArea := LoginComponent new ];		with: 'Login'.		html space.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:38'!renderHeaderOn: html	html tbsPageHeader: [ html heading: [ html text: 'Twitta' ] ]! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 19:51'!renderNoSessionBarOn: html	self renderHomeOn: html.	self renderLoginOn: html.	self renderPerfilOn: html! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 19:43'!renderHomeOn: html	html anchor		callback: [ mainArea := LoginComponent new ];		with: 'Home'.	html space! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 21:18'!renderSessionBarOn: html	self renderHomeOn: html.	self renderPerfilOn: html.	self renderTweetOn: html.! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 19:50'!renderMenuOn: html	html div		id: 'barMenu';		class: 'seccion';		with: [ 			self session user 				ifNil: [ self renderNoSessionBarOn: html ]			 	ifNotNil: [ self renderSessionBarOn: html ] 				]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 20:19'!renderTweetOn: html	html anchor		callback: [  mainArea := TweetFormComponent new ];		with: 'Tweet'.		html space.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:44'!updateRoot: anHtmlRoot    super updateRoot: anHtmlRoot.    anHtmlRoot meta        name: 'viewport';        content: 'width=device-width, initial-scale=1.0'.	anHtmlRoot title: 'Twitter'! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:40'!renderContentOn: html	html tbsContainer: [		self renderHeaderOn: html.		self renderMenuOn: html.		self renderMainAreaOn: html.	]! !!MainComponent methodsFor: 'initialize' stamp: 'Euge 12/29/2015 15:25'!initialize	super initialize.	mainArea := LoginComponent new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MainComponent class	instanceVariableNames: ''!!MainComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/28/2015 20:37'!canBeRoot	^ true! !WAComponent subclass: #RegisterComponent	instanceVariableNames: 'model'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!RegisterComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!RegisterComponent methodsFor: 'initialize' stamp: 'Euge 12/30/2015 18:36'!initialize	super initialize.	model:= User new.! !!RegisterComponent methodsFor: 'validation' stamp: 'Euge 1/3/2016 12:56'!userValidation		(User addUser: model) ifNil: [  ] ifNotNil: [  ]! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:41'!renderSubmitButtonOn: html	html submitButton		callback: [ self userValidation ];		with: 'Register'.! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:39'!renderContentOn: html	html div		id: 'register';		class: 'seccion';		with: [ 			html form: [ 				self renderNameOn: html.				self renderPasswordOn: html.				self renderSubmitButtonOn: html. 			]. 		].! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:37'!renderNameOn: html	html text: 'name:'.	html space.	html textInput callback: [ :value | model name: value ].	html break! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:38'!renderPasswordOn: html	html text: 'password:'.	html space.	html passwordInput callback: [ :value | model password: value ].	html break! !WAComponent subclass: #LoginComponent	instanceVariableNames: 'model debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!LoginComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!LoginComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/3/2016 20:55'!initialize		super initialize.	model := User new.	debug:= model.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:31'!renderNameOn: html	html text: 'Name: '.	html space.	html textInput callback: [ :value | model name: value ].	html break.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:31'!renderPasswordOn: html	html text: 'Password:'.	html space.	html passwordInput callback: [ :value | model password: value ].	html break.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:54'!renderContentOn: html	self renderLoginOn: html.	self renderRegisterOn: html.! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 15:35'!checkUser	debug:= 'llego al chequeo'.	^ User validateUserName: model name andPass: model password! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 16:14'!renderLoginOn: html	html div 		id:'login';		class:'seccion';		with:[ 			html form: [  					self renderNameOn: html;					renderPasswordOn: html;					renderSubmitButtonOn: html.				].			].! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/2/2016 23:33'!renderRegisterOn: html	html div		id: 'register';		class: 'seccion';		with: [ 					html text: 'do you don''t have an account?'.					html space.					html anchor						callback: [ self call: RegisterComponent new];						with: 'register'.				].! !!LoginComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 16:11'!renderSubmitButtonOn: html	html submitButton 		callback: [ 			debug:='apreto el callback'.			self loginUser.			];		with: 'Login'.! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:57'!loginUser	debug:= 'llego al login'.	self checkUser		ifTrue: [ self session user: model.						debug:= model.]		ifFalse: [  debug:= 'fallo logueo']! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginComponent class	instanceVariableNames: ''!!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/27/2015 20:23'!canBeRoot	^ true! !WASession subclass: #SessionComponent	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SessionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	user:		<Object>    Implementation Points!!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user	^ user! !!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user: anUser	user := anUser! !WAComponent subclass: #TweetListComponent	instanceVariableNames: 'list'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:34'!renderListaOn: html	list do:[ :each |		html div		class: 'tweet';		with: [ html render: (TweetComponent newFrom: each parent: self ) ].	]! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:38'!initialize	super initialize.	list := OrderedCollection new.! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:32'!renderContentOn: html	html heading: 'profile Page'.	self renderListaOn: html.! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:32'!list: anObject 	list := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetListComponent class	instanceVariableNames: ''!!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 03:57'!newHashtag: aHashtag	|aux|	(Hashtag hashtagExist: aHashtag )		ifTrue:[			aux := self new.			aux list: (Hashtag tweetsOfHashtag: aHashtag).		]		ifFalse:[ aux := HashtagDontExistComponent new ].	^aux.! !!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:41'!newUser: anUser	|aux|	(User userExist: anUser)		ifTrue:[			aux := self new.			aux list: anUser tweets.		]		ifFalse:[ aux := UserDontExistComponent new ].	^aux.! !!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/28/2015 20:37'!canBeRoot	^ true! !TweetListComponent subclass: #UserDontExistComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!UserDontExistComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserDontExistComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:40'!renderContentOn: html	html heading: 'Usuario inexistente'.! !TweetListComponent subclass: #HashtagDontExistComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagDontExistComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HashtagDontExistComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:43'!renderContentOn: html	html heading: 'Hashtag inexistente'.! !WAComponent subclass: #TweetComponent	instanceVariableNames: 'tweet parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent: anObject	parent := anObject! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet	^ tweet! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet: anObject	tweet := anObject! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent	^ parent! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/5/2016 20:48'!renderHashtag: aWord On: html		html anchor		callback: [ ];		with: aWord.		html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:13'!renderContentOn: html	html div		class: 'tweet';		with: [				html text: tweet ownerName. html break.				self renderTweetOn: html;					renderOptionsOn: html.				].! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 01:18'!renderTweetOn: html	self tweet text substrings do: [ :elem | 		(elem first = $#) ifTrue: [self renderHashtag: elem On: html]		ifFalse:[ 			(elem first = $@) ifTrue: [self renderUser: elem On: html] 			ifFalse:[ self renderWord: elem On: html ]			] ]! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 01:09'!renderOptionsOn: html	! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 01:15'!renderWord: aWord On: html	html text: aWord.	html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:27'!renderUser: aWord On: html		html anchor		callback: [ self parent call: ( TweetListComponent newUser: (tweet owner) )];		with: aWord.		html space.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetComponent class	instanceVariableNames: ''!!TweetComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:28'!newFrom: aTweet parent: aFather	|aux|	aux:= self new.	aux tweet: aTweet.	aux parent: aFather.	^aux.	! !Object subclass: #Hashtag	instanceVariableNames: ''	classVariableNames: 'hashtags'	poolDictionaries: ''	category: 'Seaside-Twitter'!!Hashtag commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hashtag class	instanceVariableNames: ''!!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 03:51'!hashtagExist: aHashtag	^ hashtags includesKey: aHashtag! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 03:50'!addTweet: aTweet Hashtag: aHashtag	hashtags at: aHashtag add: aTweet! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 03:55'!tweetsOfHashtag: aHashtag	hashtags associationAt: aHashtag! !