WAComponent subclass: #SearchComponent	instanceVariableNames: 'listArea suggestArea searchText'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SearchComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	friendName:		<Object>	listArea:		<Object>	suggestArea:		<Object>    Implementation Points!!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:19'!renderSearchBarOn: html	html		form: [ 			html tbsPageHeader: [ html heading: self searchBarHeading ].			html tbsInputGroup				beLarge;				with: [ 							self renderSearchBarInput: html.							self renderSearchBarSubmit: html ] ].	html break! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:12'!renderSuggestionsOn: html.	html tbsPageHeader: [ 		html heading: (self suggestAreaHeading).		].	html render: suggestArea! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 01:11'!renderSearchBarSubmit: html	^ html		tbsInputGroupButton: [ 			html tbsButton				beInfo;				callback: [ self search ];				with: ( self searchBarSubmitHeading )			].! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:12'!suggestAreaHeading	^self subclassResponsibility.! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:25'!renderContentOn: html	html tbsRow	with:[ 		html tbsColumn smallSize: 8;			with: [ 				self renderSearchBarOn: html.				self renderResultOn: html. 				].		html tbsColumn smallSize: 4;			with: [ self renderSuggestionsOn: html. ].	].! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:25'!renderResultOn: html	html render: listArea.! !!SearchComponent methodsFor: 'rendering' stamp: 'Agustin 1/17/2016 05:04'!renderSearchBarInput: html	html label		for: 'inputSearch';		class: 'sr-only';		with: self searchBarHeading.	html textInput 	tbsFormControl;		required;		placeholder: ' R U alone? ';		pattern:'\S+';		title:'Por favor ingrese solo una palabra';		id: 'inputSearch';		callback: [ :value | searchText := value ]! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 01:07'!searchBarSubmitHeading	^'Find'.! !!SearchComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 00:16'!searchBarHeading	^'Busqueda'.! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:04'!listArea	^ listArea! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:06'!suggestArea	^ suggestArea! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:07'!searchText	^ searchText! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:07'!searchText: anObject	searchText := anObject! !!SearchComponent methodsFor: 'accessing' stamp: 'Agustin 1/17/2016 05:01'!suggestArea: anObject	suggestArea := anObject! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:04'!listArea: anObject	listArea := anObject! !!SearchComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 00:35'!childrens	^Array with: listArea with: suggestArea.! !!SearchComponent methodsFor: 'search' stamp: 'FirstnameLastname 1/17/2016 00:00'!search	self subclassResponsibility! !Object subclass: #Tweet	instanceVariableNames: 'text owner hashtags timestamp'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!Tweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>	reference:		<Object>	text:		<Object>    Implementation Points!!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/11/2016 16:30'!linkHashtags	 | hashtag | self unlinkHashtags. self hashtagsNames  do: [ :each |    hashtag := Hashtag findOrCreate: each.   hashtag addTweet: self.   self hashtags add: hashtag ]! !!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/11/2016 16:19'!hashtagsNames	^ self text allRegexMatches: '#\S+'! !!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/5/2016 16:49'!parsehashtags	hashtags := self text allRegexMatches: '#\w+'.! !!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/11/2016 16:29'!unlinkHashtags	self hashtags do:[:each |  each removeTweet: self].! !!Tweet methodsFor: 'as yet unclassified' stamp: 'Euge 1/13/2016 15:07'!makeComponent: aFather	^ TweetComponent newFrom: self Parent: aFather.! !!Tweet methodsFor: 'accessing' stamp: 'Agustin 1/17/2016 05:12'!isValid	^(self text size <= 140)! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner: anObject	owner := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:17'!text	^ text! !!Tweet methodsFor: 'accessing' stamp: 'Euge 1/14/2016 23:45'!tweet	^ nil! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner	^ owner! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 15:21'!initialize	text := ''.	hashtags := OrderedCollection new.	timestamp := DateAndTime current.! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 14:42'!timestamp	^ timestamp! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/11/2016 16:20'!reference	^ self text allRegexMatches: '@\S+'! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!ownerName	^ owner name! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:12'!hashtags	^ hashtags! !!Tweet methodsFor: 'accessing' stamp: 'Euge 1/16/2016 21:25'!parent	^ parent! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/11/2016 16:30'!delete	self unlinkHashtags.	Tweet removeTweet: self.! !!Tweet methodsFor: 'accessing' stamp: 'Agustin 1/17/2016 05:12'!store	(self isValid)		ifTrue:[ 	Tweet addTweet: self . ^true]		ifFalse:[ Warning signal: 'Invalid Tweet'.]! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 16:47'!hashtags: anObject	hashtags := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:09'!text: anObject	text := anObject.	self linkHashtags.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tweet class	instanceVariableNames: 'tweets'!!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 19:54'!tweets	tweets ifNil: [ 		tweets:= SortedCollection sortBlock: [ :e1 :e2 | e1 timestamp > e2 timestamp ].			].	^tweets.! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 13:55'!addTweet: aTweet	self tweets add: aTweet! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 20:05'!reset	User users do:[ :user | 			user tweets do:[ :tweet | user removeTweet: tweet ].			 ] .	tweets ifNotNil: [ tweets := nil. ].! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 13:48'!removeTweet: aTweet	tweets remove: aTweet! !WAComponent subclass: #FriendComponent	instanceVariableNames: 'friend parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FriendComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>	parent:		<Object>    Implementation Points!!FriendComponent methodsFor: 'initialize' stamp: 'Euge 1/8/2016 11:55'!initialize: aFriend	super initialize.	friend := aFriend.! !!FriendComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 18:31'!renderExistingFriendOn: html	html tbsButton beDanger;		callback: [ self session user deleteFriend: friend ];		with: 'I hate him, delete it!!'! !!FriendComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 19:15'!renderContentOn: html	html tbsListGroupItem: [		html tbsBadge: [			html form: [ 			(self session user hasFriend: friend)				ifTrue: [ self renderExistingFriendOn: html ];				ifFalse: [ self renderNoExistingFriendOn: html ] ]			].			self renderUserOn: html.		].! !!FriendComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 18:32'!renderNoExistingFriendOn: html	html tbsButton beSuccess;		callback: [ self session user addFriend: friend ];		with: 'Make BFF!!'! !!FriendComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 18:40'!renderUserOn: html.	html anchor		callback: [ ];		with: [ html heading level:3; with: self friend name ].! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/8/2016 11:55'!friend	^ friend! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:44'!parent	^ parent! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:13'!model: anObject	model := anObject! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/8/2016 11:54'!friend: anObject	friend := anObject! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:13'!model	^ model! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:44'!parent: anObject	parent := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FriendComponent class	instanceVariableNames: ''!!FriendComponent class methodsFor: 'instance creation' stamp: 'FirstnameLastname 1/17/2016 01:25'!new: aFriend	|aux|		aux:= self new.	aux initialize: aFriend.	^aux! !!FriendComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:25'!new: aUser parent: aFather	|aux|		aux:= self new.	aux model: aUser.	aux parent: aFather.	^aux! !WAComponent subclass: #ReTweetComponent	instanceVariableNames: 'reTweet tweetArea parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ReTweetComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	parent:		<Object>	reTweet:		<Object>	tweetArea:		<Object>    Implementation Points!!ReTweetComponent methodsFor: 'rendering' stamp: 'Euge 1/14/2016 15:10'!renderContentOn: html		self renderReTweetOn:html.! !!ReTweetComponent methodsFor: 'rendering' stamp: 'Euge 1/14/2016 15:24'!renderOwnerOn: html	html anchor		callback: [ ];		with: (self session user name).		html space.! !!ReTweetComponent methodsFor: 'rendering' stamp: 'Euge 1/14/2016 15:13'!renderOwner	^ (reTweet reOwner)! !!ReTweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/16/2016 23:47'!renderReTweetOn: html		html tbsPanel beSuccess 		with: [ 			html tbsPanelHeading: [				 html tbsPanelTitle level: 4; with: ( reTweet reOwner ). html text: self timeString 				].			html tbsPanelBody: [ html render: tweetArea ].			].! !!ReTweetComponent methodsFor: 'initialize' stamp: 'Euge 1/13/2016 15:27'!initialize: aRetweet and: aFather	parent:= aFather.	reTweet := aRetweet.	tweetArea := TweetComponent newFrom: ( aRetweet tweet ) Parent: aFather ! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!reTweet: anObject	reTweet := anObject! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/14/2016 15:45'!timeString	^	'Retweeteado el: ',				reTweet timestamp day asString , '/' ,				reTweet timestamp month asString, '/' ,				reTweet timestamp year asString,	' a las: ',				reTweet timestamp hour asString, ':' ,				reTweet timestamp minute asString, ':' ,				reTweet timestamp second asString,	' ( hace ',		(reTweet timestamp - DateAndTime current						roundTo: (Duration seconds: 1)					) negated humanReadablePrintString,	 ' )'! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!parent	^ parent! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!reTweet	^ reTweet! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!tweetArea: anObject	tweetArea := anObject! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!tweetArea	^ tweetArea! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 15:00'!childrens	^Array with: tweetArea! !!ReTweetComponent methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:57'!parent: anObject	parent := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ReTweetComponent class	instanceVariableNames: ''!!ReTweetComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/13/2016 15:05'!newFrom: aReTweet Parent: aFather	^self new initialize: aReTweet and: aFather ! !WAComponent subclass: #SearchFriendComponent	instanceVariableNames: 'model list'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SearchFriendComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SearchFriendComponent methodsFor: 'initalize' stamp: 'Euge 1/7/2016 01:25'!initialize	super initialize.	model:= User new.	list:= FriendListComponent newRandomList:self.! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 00:21'!renderSearch: html	html form:[	html		tbsFormGroup: [ 			html label				for: 'friendSearch';				with: 'R U alone?'.			html textInput				tbsFormControl;				id: 'friendSearchID';				placeholder: 'Enter a friend name';				callback: [ :value | model name: value ] ].	html tbsButton		bePrimary;		callback: [ self search ];		with: 'Find BFF!!'].! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/6/2016 23:10'!renderContentOn: html	self renderSearch: html.	html render: list.! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 02:33'!search		 list:= FriendListComponent new: (User searchFriend: model name).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SearchFriendComponent class	instanceVariableNames: ''!!SearchFriendComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/6/2016 16:59'!canBeRoot	^ true! !WAComponent subclass: #HashtagComponent	instanceVariableNames: 'hashtag'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtag:		<Object>    Implementation Points!!HashtagComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 01:24'!hashtag	^ hashtag! !!HashtagComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/17/2016 01:24'!hashtag: anObject	hashtag := anObject! !!HashtagComponent methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:07'!renderContentOn: html	html anchor		class: 'hashtag';		callback: [  ];		with: [ html heading level:3; with: (hashtag name) ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HashtagComponent class	instanceVariableNames: ''!!HashtagComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:25'!new: aHashtag	|aux|	aux:= self new.	aux hashtag: aHashtag.	^aux! !WAComponent subclass: #TweetComponent	instanceVariableNames: 'tweet parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent: anObject	parent := anObject! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent	^ parent! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet	^ tweet! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet: anObject	tweet := anObject! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 22:31'!renderUserOn: html	html anchor		callback: [ parent listUser: (self session user) ];		with: (self session user name).		html space.! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 21:27'!initialize	super initialize.	tweet := Tweet new.! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 22:36'!renderContentOn: html	html tbsPanel beInfo 		with: [ html tbsPanelHeading: 					[ html tbsPanelTitle level: 4; 						with: [ self renderOwnerOn: html. ].						html text: (self timeString).					 ].				html tbsPanelBody: [ 					html paragraph with: [ self renderTweetOn: html ].					].				html tbsPanelFooter: [ self renderOptionsOn: html. ]			].! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 14:56'!renderTweetOn: html	self tweet text substrings		do: [ :elem | 			elem first = $#				ifTrue: [ self renderHashtag: elem On: html ]				ifFalse: [ 					elem first = $@						ifTrue: [ self renderUser: elem On: html ]						ifFalse: [ self renderWord: elem On: html ] 					] 			].! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 14:52'!renderOwnerOn: html		html anchor		callback: [ parent listUser: (self tweet owner) ];		with: (self tweet owner name).		html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 22:53'!renderHashtag: aWord On: html		html anchor		callback: [ parent listHashtag: (Hashtag findOrCreate: aWord)  ];		with: aWord.		html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 15:49'!renderTimeOn: html	html		paragraph: [ 			html render: 'tweeteado el: '.			html render: 				self tweet timestamp day asString , '/' ,				self tweet timestamp month asString, '/' ,				self tweet timestamp year asString.			html render: ' a las: ',				self tweet timestamp hour asString, ':' ,				self tweet timestamp minute asString, ':' ,				self tweet timestamp second asString.			html render: ' (hace '.			html render:					(self tweet timestamp - DateAndTime current						roundTo: (Duration seconds: 1)					) negated humanReadablePrintString.			html render: ' )' ]! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 22:36'!timeString	^	'tweeteado el: ',				self tweet timestamp day asString , '/' ,				self tweet timestamp month asString, '/' ,				self tweet timestamp year asString,	' a las: ',				self tweet timestamp hour asString, ':' ,				self tweet timestamp minute asString, ':' ,				self tweet timestamp second asString,	' ( hace ',		(self tweet timestamp - DateAndTime current						roundTo: (Duration seconds: 1)					) negated humanReadablePrintString,	 ' )'! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/15/2016 14:33'!renderOptionsOn: html	html tbsForm class:'center-block';	with: [ 		html tbsButtonGroup: [ 			html tbsButton 			callback: [ 	];			with: [				html tbsGlyphIcon perform: #iconShareAlt. 				html space. 				html text: 'Responder'.			].				html tbsButton 			callback: [ self session user toggleReTweet: tweet ];			with: [				( self session user hasRetweet: tweet ) 					ifTrue: [ 						html tbsGlyphIcon perform: #iconFilm						 ] 					ifFalse: [   						html tbsGlyphIcon perform: #iconRetweet. 					].				html space. 				html text: 'Retweet'.			].			html tbsButton 			callback: [ self session user toggleFavourite: (self tweet) ];			with: [				(self session user favourites includes: (self tweet))					ifTrue:[ html tbsGlyphIcon perform: #iconHeart. ]					ifFalse:[ html tbsGlyphIcon perform: #iconHeartEmpty. ].				html space. 				html text: 'Favourite'.			].		].	].! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 01:15'!renderWord: aWord On: html	html text: aWord.	html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 20:22'!renderUser: aWord On: html		html anchor		callback: [ parent listUser: (User find: aWord) ];		with: aWord.		html space.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetComponent class	instanceVariableNames: ''!!TweetComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:28'!newFrom: aTweet parent: aFather	|aux|	aux:= self new.	aux tweet: aTweet.	aux parent: aFather.	^aux.	! !!TweetComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/13/2016 15:16'!newFrom: aTweet Parent: aFather	|aux|	aux:= self new.	aux tweet: aTweet.	aux parent: aFather.	^aux.	! !WAComponent subclass: #TweetFormComponent	instanceVariableNames: 'tweet'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetFormComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	tweet:		<Object>    Implementation Points!!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:37'!renderUserOn: html	html tbsLabel beInfo;		with: (self session user name)! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:11'!initialize	super initialize.	tweet := Tweet new.	tweet owner: self session user.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:31'!renderContentOn: html	html tbsModal id: 'tweetear'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Tweeteate algo...'								 ].				html tbsModalBody: [ 					html form: [ 						self renderUserOn: html.						self renderTweetOn: html.						self renderSubmitButtonOn: html.					]. 				].			]		]		].! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:49'!renderTweetOn: html	html tbsFormGroup with: [		html label for: 'InputText'; class: 'sr-only'; with: 'Texto: '.		html tbsInputGroup class:'col-xs-12';			with: [ 			html textInput tbsFormControl; required;				id: 'InputText'; 				placeholder: 'Tweet';				maxLength: '140';				callback: [ :value | tweet text: value. ].			].		html small: 'máximo 140 caracteres' .		html space].! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:55'!renderSubmitButtonOn: html	html tbsButton bePrimary; class:'center-block';		callback: [ self session user addTweet: tweet. ];		with: 'Tweet nigga!!'.	html tbsButton beWarning; beExtraSmall; class:'center-block';		type: 'reset';		with: 'Borrar texto'.! !SearchComponent subclass: #FriendSearchComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FriendSearchComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	friendName:		<Object>    Implementation Points!!FriendSearchComponent methodsFor: 'search' stamp: 'Agustin 1/17/2016 04:38'!search	|aux|	aux:= User searchFriend: searchText. 	aux remove: (self session user) ifAbsent:[].	listArea := (FriendListComponent new: aux) .	! !!FriendSearchComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/17/2016 00:12'!suggestAreaHeading	^ 'Maybe someone is an okey guy:'! !!FriendSearchComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/17/2016 00:16'!searchBarHeading	^'Busqueda'.! !!FriendSearchComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/17/2016 01:08'!searchBarSubmitHeading	^'Find BFF!!'! !!FriendSearchComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/17/2016 00:35'!initialize	super initialize.	listArea := FriendListComponent new: (self session user friends).	suggestArea:= FriendListComponent newRandomListForUser: (self session user)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FriendSearchComponent class	instanceVariableNames: ''!!FriendSearchComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/8/2016 12:12'!canBeRoot	^ true! !WASession subclass: #SessionComponent	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SessionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	user:		<Object>    Implementation Points!!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user: anUser	user := anUser! !!SessionComponent methodsFor: 'accessing' stamp: 'Euge 1/17/2016 02:47'!favourites	^ user favourites! !!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user	^ user! !Object subclass: #User	instanceVariableNames: 'name password tweets retweets favourites friends'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	favourites:		<Object>	friends:		<Object>	name:		<Object>	pass:		<Object>	retweets:		<Object>	tweets:		<Object>    Implementation Points!!User methodsFor: 'accessing' stamp: 'Euge 1/8/2016 22:10'!deleteFriend: aFriend		friends remove: aFriend.! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!favourites	^ favourites! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!retweets	^ retweets! !!User methodsFor: 'accessing' stamp: 'Euge 1/17/2016 03:10'!friendsTweets		|aux|	aux := SortedCollection sortBlock: [ :e1 :e2 | e1 timestamp > e2 timestamp ].	self friends do: [ :friend | aux addAll: (friend tweets) ].	aux addAll: (self tweets).	^aux! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!friends	^ friends! !!User methodsFor: 'accessing' stamp: 'Euge 1/15/2016 14:14'!makeReTweet: aTweet	^ReTweet new: aTweet and: self name.! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!tweets	^ tweets! !!User methodsFor: 'accessing' stamp: 'Euge 1/7/2016 00:44'!friends: anObject	^ friends := anObject! !!User methodsFor: 'accesing' stamp: 'Euge 12/31/2015 21:10'!password	^password! !!User methodsFor: 'accesing' stamp: 'Euge 1/15/2016 14:13'!toggleReTweet: aTweet	tweets detect: [ :each | each tweet = aTweet ] ifFound: [ :each | tweets remove: each ] ifNone: [ tweets add: (self makeReTweet: aTweet) ]! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name: aName	name:= aName! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 19:34'!toggleFavourite: aTweet	favourites remove: aTweet ifAbsent:[ favourites add: aTweet ].! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 19:30'!initialize	tweets := SortedCollection sortBlock:[ :e1 :e2 | e1 timestamp < e2 timestamp ].	favourites := SortedCollection sortBlock:[ :e1 :e2 | e1 timestamp < e2 timestamp ].	retweets := SortedCollection sortBlock:[ :e1 :e2 | e1 timestamp < e2 timestamp ].	friends := OrderedCollection new.! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 16:30'!removeTweet: aTweet	self tweets remove: aTweet.	aTweet delete.! !!User methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:21'!password: aPass	password:= aPass! !!User methodsFor: 'accesing' stamp: 'Euge 1/8/2016 12:28'!addFriend: aFriend	friends addIfNotPresent: aFriend.! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name	^name! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 18:03'!hasFriend: aFriend	^friends anySatisfy: [ :each | each name = aFriend name].! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/6/2016 14:03'!addTweet: aTweet	self tweets add: aTweet.	aTweet store.! !!User methodsFor: 'accesing' stamp: 'Euge 1/15/2016 14:19'!hasRetweet: aTweet	^ tweets anySatisfy: [ :each | each tweet = aTweet ]! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 19:29'!removeFavourite: aTweet	favourites remove: aTweet ifAbsent:[ ].! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 19:28'!addFavourite: aTweet	favourites addIfNotPresent: aTweet.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: 'users'!!User class methodsFor: 'session management' stamp: 'FirstnameLastname 1/7/2016 16:53'!validateUserName: aName	^ aName matchesRegexIgnoringCase: '@(\w|_|-|\.|!!|\?|¡|¿)+'! !!User class methodsFor: 'session management' stamp: 'FirstnameLastname 1/7/2016 16:40'!validateUserName: aName andPass: aPass	^self users anySatisfy: [ :each | each name = aName and: [ each password = aPass ] ].! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:57'!userNameExist: anUserName	^ self users anySatisfy: [ 				:unUsuario | anUserName = unUsuario name and: [ self validateUserName: anUserName ] ]! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:37'!find: aName	(self userNameExist: aName) 		ifTrue:[ ^(users select:[:user | user name = aName ]) first ] 		ifFalse: [ ^false ]! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:58'!userExist: anUser	^ self userNameExist: anUser name.! !!User class methodsFor: 'adding/removing users' stamp: 'Euge 1/7/2016 00:14'!searchFriend: aFriend  ^ users select: [ :each | each name matchesRegexIgnoringCase: ( '(.*', aFriend , '.*)+' ) ].! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 17:40'!addUser: anUser	((self userExist: anUser)not and:[ self validateUserName: anUser name ]) 			ifTrue: [ users add: anUser. ^true ]			ifFalse:[ ^false ]! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/6/2016 13:49'!removeUser: anUser	^((self userExist: anUser) ifFalse: [users remove: anUser]).! !!User class methodsFor: 'accesing' stamp: 'FirstnameLastname 1/11/2016 16:52'!findRandom	^self users at: ((1 to: self users size) atRandom)! !!User class methodsFor: 'accesing' stamp: 'FirstnameLastname 1/7/2016 19:57'!reset	users ifNotNil: [ users:= nil ].! !!User class methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:24'!users	users ifNil: [ 		users:= OrderedCollection new.				].	^users.! !Object subclass: #Hashtag	instanceVariableNames: 'tweets name'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!Hashtag commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Hashtag methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 04:59'!initialize	tweets := OrderedCollection new! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:01'!removeTweet: aTweet	tweets remove: aTweet.! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:01'!addTweet:aTweet	tweets add: aTweet.! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!name: anObject	name := anObject! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!name	^name! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!tweets	^ tweets! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hashtag class	instanceVariableNames: 'hashtags'!!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 04:50'!hashtagExist: aHashtagName	^ self hashtags anySatisfy: [ :hashtag | hashtag name = aHashtagName].! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 19:57'!reset	hashtags ifNotNil: [ hashtags := nil. ].! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 16:48'!findOrCreate: aHashtagName	| aux |	(self hashtagExist: (aHashtagName))		ifTrue: [ ^ (self hashtags select: [ :elem | elem name = aHashtagName ]) first]		ifFalse: [ 			aux := self new name: (aHashtagName).			self hashtags add: aux.			^ aux ] ! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:46'!find: aHashtagName	(self hashtagExist: (aHashtagName))		ifTrue: [ ^ (self hashtags select: [ :elem | elem name = aHashtagName ]) first]! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 05:24'!hashtags	hashtags ifNil: [ 		hashtags := OrderedCollection new.				].	^hashtags! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 00:53'!trending	| startDate |	startDate := DateAndTime current - (Duration hours: 3).	^ (self hashtags select: [ :each | each tweets first timestamp > startDate ])		asSortedCollection: [ :e1 :e2 | 			(e1 tweets select: [ :tw | tw timestamp > startDate ]) size				> (e2 tweets select: [ :tw | tw timestamp > startDate ]) size ]! !WAComponent subclass: #MainComponent	instanceVariableNames: 'mainArea menuArea debug modalArea1 modalArea2'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!MainComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	mainArea:		<Object>	menuArea:		<Object>    Implementation Points!!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:48'!renderMenuOn: html	html tbsNavbar beDefault		id: 'barMenu';		class: 'seccion';		with: [ 			self session user 				ifNil: [ self renderNoSessionBarOn: html ]			 	ifNotNil: [ self renderSessionBarOn: html ] 				]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 01:56'!renderHomeOn: html	html tbsNavbarBrand		"url: 'index';"		with: [ 					html tbsGlyphIcon perform: #iconBullhorn.					html space. 					html text: 'Home' ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:39'!renderMainAreaOn: html	html div		id: 'mainArea';		class: 'seccion';		with: [ html render: mainArea ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 02:29'!renderLogoutOn: html	html form: [		html tbsNavbarLink 		tbsPullRight; 		url: 'index';		"callback: [  ];"		with: [ 			html tbsGlyphIcon perform: #iconNewWindow.			html text: ' Logout' ].		].	html tbsNavbarText tbsPullRight 	with: [ 		html text: 'Logueado como '.   		html tbsNavbarLink: (self session user name)	].		! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/16/2016 23:27'!renderOwnTweetsOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := ProfileComponent listUser: (self session user) ];			with: 'Mis Tweets'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/16/2016 23:26'!renderOwnHomeOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := ProfileComponent listUserHome: (self session user) ];			with: 'Inicio'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 20:06'!renderFriendsOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := FriendSearchComponent new. ];			with: 'Amigos'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 01:04'!renderSessionBarOn: html	self renderHomeOn: html.	self renderOwnTweetsOn: html.	self renderOwnHomeOn: html.	self renderFavouritesOn: html.	self renderTweetOn: html.	self renderFriendsOn: html.	self renderHashtagsOn: html.	self renderLogoutOn: html.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 20:09'!renderFriendTweetsOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := ProfileComponent listUser: (self session user) ];			with: 'Mis amigos dicen..'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:54'!renderNoSessionBarOn: html	self renderHomeOn: html.	self renderLoginOn: html.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:07'!renderContentOn: html	html tbsContainer: [		self renderHeaderOn: html.		self renderMenuOn: html.		self renderMainAreaOn: html.		self renderModalAreaOn: html.	]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 19:49'!children	^ Array with: mainArea! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:23'!renderTweetOn: html	html tbsForm:[			html html: '<a data-toggle="modal" href="#tweetear">'.			html tbsNavbarButton tbsPullLeft ; beDefault;				callback: [ 	];				with: [					html tbsGlyphIcon perform: #iconEdit. 					html space. 					html text: 'Tweetear'.				].			html html:'</a>'.	].	modalArea2 := TweetFormComponent new.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:12'!renderLoginOn: html		html tbsButtonGroup tbsPullRight;		with: [ 			html html: '<a data-toggle="modal" href="#registro">'.			html tbsNavbarButton tbsPullRight; beDefault;				callback: [ 	 ];				with: [					html tbsGlyphIcon perform: #iconListAlt. 					html space. 					html text:'Registrarse'.				].			html html:'</a>'.						html html: '<a data-toggle="modal" href="#login">'.			html tbsNavbarButton tbsPullRight; beDefault;				callback: [ 	 ];				with: [					html tbsGlyphIcon perform: #iconUser. 					html space. 					html text:'Login'.				].			html html:'</a>'.		].	modalArea1 := LoginComponent new.	modalArea2 := RegisterComponent new. ! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:42'!renderHeaderOn: html	html tbsPageHeader: [ html heading level:1; with: [ html text: 'Twitta' ] ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/17/2016 01:03'!renderHashtagsOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := HashtagSearchComponent new. ];			with: 'Hashtags'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:44'!updateRoot: anHtmlRoot    super updateRoot: anHtmlRoot.    anHtmlRoot meta        name: 'viewport';        content: 'width=device-width, initial-scale=1.0'.	anHtmlRoot title: 'Twitter'! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:01'!renderModalAreaOn: html	html div		id: 'modalArea';		with: [ html render: modalArea1. html render: modalArea2. ]! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/17/2016 03:13'!listUser: anUser	mainArea := UserTLComponent new: anUser parent: self.! !!MainComponent methodsFor: 'rendering' stamp: 'Euge 1/17/2016 03:14'!renderFavouritesOn: html.	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := FavouriteTLComponent new: self ];			with: 'Favoritos'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:20'!renderPerfilOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := ProfileComponent listUser: (self session user) ];			with: 'Perfil'.	].! !!MainComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/7/2016 16:00'!initialize	super initialize.	modalArea1 := nil.	modalArea2 := nil.	menuArea := nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MainComponent class	instanceVariableNames: ''!!MainComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/28/2015 20:37'!canBeRoot	^ true! !WAComponent subclass: #RegisterComponent	instanceVariableNames: 'model alert'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!RegisterComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!RegisterComponent methodsFor: 'initialize' stamp: 'Euge 12/30/2015 18:36'!initialize	super initialize.	model:= User new.! !!RegisterComponent methodsFor: 'validation' stamp: 'FirstnameLastname 1/7/2016 17:38'!submitUser	^(User addUser: model)! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:25'!renderContentOn: htmlhtml tbsModal id: 'registro'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Registro de usuario'								 ].				html tbsModalBody: [ 					html form: [ 						self renderNameOn: html.						self renderPasswordOn: html.						self renderSubmitButtonOn: html.					]. 				].			]		]		].! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:02'!renderSubmitButtonOn: html	html tbsButton beSuccess; class:'center-block';		callback: [ self submitUser ];		with: 'Registrarse'.! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:06'!renderNameOn: html	html tbsFormGroup: [		html label for: 'InputUser'; class: 'sr-only'; with: 'Nombre de Usuario'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconUser].				html textInput tbsFormControl; id: 'InputUser'; placeholder: 'Usuario';required;					callback: [ :value | model name: ( '@' , value) ].			].		html small: 'solo letras, números o caracteres ¿ ? _ - ¡ !! ' .		html space].! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:29'!renderPasswordOn: html	html tbsFormGroup: [ 		html label for: 'InputPassword'; class: 'sr-only'; with: 'Contraseña'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconEyeClose ].				html passwordInput tbsFormControl id: 'InputPassword'; placeholder: 'Contraseña';required;					callback: [ :value | model password: value ].			].		html space.		]. ! !Tweet subclass: #ReTweet	instanceVariableNames: 'reOwner tweet'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ReTweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	reOwner:		<Object>	tweet:		<Object>    Implementation Points!!ReTweet methodsFor: 'initialize' stamp: 'Euge 1/14/2016 15:25'!initialize: aTweet and: userName	reOwner := userName.	tweet := aTweet.! !!ReTweet methodsFor: 'as yet unclassified' stamp: 'Euge 1/13/2016 15:06'!makeComponent: aFather	^ ReTweetComponent newFrom: self Parent: aFather.! !!ReTweet methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:52'!tweet	^ tweet! !!ReTweet methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:52'!tweet: anObject	tweet := anObject! !!ReTweet methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:52'!reOwner: anObject	reOwner := anObject! !!ReTweet methodsFor: 'accessing' stamp: 'Euge 1/13/2016 14:52'!reOwner	^ reOwner! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ReTweet class	instanceVariableNames: ''!!ReTweet class methodsFor: 'as yet unclassified' stamp: 'Euge 1/13/2016 14:55'!new: aTweet and: aUserName	^self new initialize: aTweet and: aUserName! !SearchComponent subclass: #HashtagSearchComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagSearchComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 03:56'!initialize	super initialize.	listArea := nil.	suggestArea:= HashtagListComponent new:(Hashtag trending).! !!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:53'!addSimbol: aWord	( aWord first = $#)		ifTrue:[ ^aWord ]		ifFalse:[ ^ ('#',aWord) ]! !!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:02'!suggestAreaHeading	^ 'Tendencia'! !!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:54'!search	(Hashtag hashtagExist: (self addSimbol: searchText) )		ifTrue:[	listArea := HashtagTLComponent new: ( Hashtag find: (self addSimbol: searchText) ) parent: self. ]		ifFalse:[ listArea := HashtagTLComponent new: ( Hashtag new ) parent: self.]! !!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:08'!searchBarSubmitHeading	^'Buscar Hashtag'! !!HashtagSearchComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:02'!searchBarHeading	^ 'Busqueda'.! !WAComponent subclass: #LoginComponent	instanceVariableNames: 'model debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!LoginComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!LoginComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/3/2016 20:55'!initialize		super initialize.	model := User new.	debug:= model.! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:09'!renderNameOn: html	html tbsFormGroup: [		html label for: 'InputUser'; class: 'sr-only'; with: 'Nombre de Usuario'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconUser].				html textInput tbsFormControl; id: 'InputUser'; placeholder: 'Usuario';required;					callback: [ :value | model name: ('@' , value) ].			].		html space].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:29'!renderLoginOn: html	html tbsModal id: 'login'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Login'								 ].				html tbsModalBody: [ 					html tbsForm: [  							self renderNameOn: html;						renderPasswordOn: html;						renderSubmitButtonOn: html.					 ].				 ].				html tbsModalFooter:[					self renderRegisterOn: html.				 ].			]		]		].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:25'!renderContentOn: html	html tbsForm with: [		self renderLoginOn: html.	].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 15:12'!renderSubmitButtonOn: html	html tbsButton bePrimary; class:'center-block';		callback: [ 	self loginUser. ];		with: 'Login'.! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:06'!checkUser	^ User validateUserName: model name andPass: model password! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:29'!renderPasswordOn: html	html tbsFormGroup: [ 		html label for: 'InputPassword'; class: 'sr-only'; with: 'Contraseña'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconEyeClose ].				html passwordInput tbsFormControl id: 'InputPassword'; placeholder: 'Contraseña';required;					callback: [ :value | model password: value ].			].		html space.		]. ! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:07'!loginUser	self checkUser		ifTrue: [ self session user: (User find: (model name))]		ifFalse: [  debug:= 'fallo logueo']! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:32'!renderRegisterOn: html	html div		id: 'register';		class: 'seccion';		with: [ 					html text: 'no estas registrado?'.					html space.					html html: '<a data-toggle="modal" href="#registro">'.					html tbsButton beLink; beSmall;						callback: [ self call: RegisterComponent new];						with: 'Registrate'.					html html: '</a>'.				].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginComponent class	instanceVariableNames: ''!!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:04'!new: aCollection! !!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:04'!new: aCollection Parent: aFather! !!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/27/2015 20:23'!canBeRoot	^ true! !WAComponent subclass: #ListComponent	instanceVariableNames: 'list'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	debug:		<Object>	list:		<Object>    Implementation Points!!ListComponent methodsFor: 'rendering' stamp: 'Euge 1/6/2016 17:40'!newComponent:each	^self subclassResponsibility ! !!ListComponent methodsFor: 'initialize' stamp: 'Euge 1/17/2016 03:01'!initialize: aCollection	super initialize.	list := OrderedCollection new.	aCollection do: [ :each | list add: (self newComponent: each) ]! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:42'!renderListOn: html	^ self subclassResponsibility! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:42'!renderWarningOn: html		^ self subclassResponsibility! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:39'!list	^ list! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:41'!renderContentOn: html	( list isEmpty )		ifTrue: [ self renderWarningOn: html ];		ifFalse: [ self renderListOn: html ].! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:38'!childrens		^ list asArray! !!ListComponent methodsFor: 'acccessing' stamp: 'Euge 1/9/2016 20:40'!list: anObject	list := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ListComponent class	instanceVariableNames: ''!!ListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:08'!new: anObject parent: aFather! !ListComponent subclass: #HashtagListComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HashtagListComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:56'!renderWarningOn: html		html tbsAlert beWarning;			with: [ 				html strong: 'That hashtag doesn''t exist'.				html text: 'tweet something to create it =)' ].! !!HashtagListComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 01:32'!renderListOn: html	list do:[ :each | html render: each  ].! !!HashtagListComponent methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 03:42'!newComponent: each	^ HashtagComponent new: each! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HashtagListComponent class	instanceVariableNames: ''!!HashtagListComponent class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:13'!new: aCollection		^ self new initialize: aCollection.! !ListComponent subclass: #FriendListComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FriendListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	list:		<Object>    Implementation Points!!FriendListComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 02:32'!newComponent: each	^ FriendComponent new: each ! !!FriendListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 17:53'!renderWarningOn: html		html tbsAlert 			beWarning;			with: [ 				html strong: 'Theres''n No friend like that!!'. 				html text: ' Because no ones love u and try to hide from u' 			].! !!FriendListComponent methodsFor: 'rendering' stamp: 'Euge 1/8/2016 22:04'!renderFriendOn: html for: aFriend	(self itsItself: aFriend)		ifFalse: [ html render: aFriend ]! !!FriendListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 19:16'!renderListOn: htmlhtml tbsListGroup: [ 	list do: [ :each | self renderFriendOn: html for: each ]	].! !!FriendListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/11/2016 17:52'!itsItself: aFriend"sirve?"	^ self session user name = aFriend name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FriendListComponent class	instanceVariableNames: ''!!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:13'!newRandom	^ self new: 	(self randomList ).! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 16:45'!newRandomList: aFather	|aux|		aux:= self newRandomList.	aux parent: aFather.		^aux.! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 17:26'!newRandomList	| aux |	aux := FriendListComponent new.	aux list: self randomList.	^ aux! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 17:27'!randomList	| aux friend|	aux := OrderedCollection new.	friend := (User findRandom).	(10 min: (User users size))		timesRepeat: [ 		[ aux includes: friend ] 				whileTrue: [friend := (User findRandom) ].			aux add: friend ].	^ aux! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 17:57'!randomListForUser: anUser	| aux friend|	aux := OrderedCollection new.	friend := (User findRandom).	(10 min: ((User users size) - (anUser friends size)-1))		timesRepeat: [ 		[ ((anUser hasFriend: friend) or:[ aux includes: friend ]) or:[ friend name = anUser name] ] 				whileTrue: [friend := (User findRandom) ].			aux add: friend ].	^ aux! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/11/2016 18:07'!newRandomListForUser: anUser		| aux |	aux := FriendListComponent new: (self randomListForUser: anUser).	^ aux! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:13'!new: aCollection	^ self new initialize: aCollection.! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 04:13'!new: aList parent: aFather	^ self new list: aList; parent: aFather.! !ListComponent subclass: #TweetListComponent	instanceVariableNames: 'parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetListComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 12:38'!parent: anObject	parent := anObject! !!TweetListComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 12:40'!parent	^parent! !!TweetListComponent methodsFor: 'accessing' stamp: 'Euge 1/17/2016 01:52'!newComponent: each		^ each makeComponent: parent! !!TweetListComponent methodsFor: 'accessing' stamp: 'Euge 1/17/2016 03:22'!initialize: aCollection parent: aFather	parent:= aFather.	self initialize: aCollection.! !!TweetListComponent methodsFor: 'rendering' stamp: 'Euge 1/9/2016 21:08'!renderListOn: html	list do:[ :each |		html div		class: 'tweet';		with: [  html render: each  ].	]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetListComponent class	instanceVariableNames: ''!!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'Agustin 1/17/2016 03:48'!new: anObject parent: aFather		^self subclassResponsibility! !TweetListComponent subclass: #HashtagTLComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagTLComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HashtagTLComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:55'!renderWarningOn: html		html tbsAlert beWarning;			with: [ 				html strong: 'Theres''n No friend like that!!'. 				html text: ' Because no ones love u and try to hide from u' 				].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HashtagTLComponent class	instanceVariableNames: ''!!HashtagTLComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/11/2016 00:00'!new: aHashtag parent: aFather				^ self new initialize: (aHashtag tweets) parent: aFather! !TweetListComponent subclass: #UserHomeTLComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!UserHomeTLComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserHomeTLComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/16/2016 23:21'!renderWarningOn: html		html tbsAlert 			beWarning;			with: [ 				html strong: 'Theres''n No user like that!!'.				html text: ' Because you don''t know the name of your friend' 			].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserHomeTLComponent class	instanceVariableNames: ''!!UserHomeTLComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/16/2016 23:22'!new: anUser parent: aFather	(User userExist: anUser)		ifTrue:[ ^ self new initialize: (anUser friendsTweets) parent: aFather  ]		ifFalse:[ ^ self new initialize: (OrderedCollection new) parent: aFather].! !TweetListComponent subclass: #UserTLComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!UserTLComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserTLComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/16/2016 23:18'!renderWarningOn: html		html tbsAlert 			beWarning;			with: [ 				html strong: 'Theres''n No friend like that!!'.				html text: ' Because no ones love u and try to hide from u' 			].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserTLComponent class	instanceVariableNames: ''!!UserTLComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/11/2016 00:07'!new: anUser parent: aFather	(User userExist: anUser)		ifTrue:[ ^ self new initialize: (anUser tweets) parent: aFather  ]		ifFalse:[ ^ self new initialize: (OrderedCollection new) parent: aFather].! !TweetListComponent subclass: #FavouriteTLComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FavouriteTLComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FavouriteTLComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:55'!renderWarningOn: html		html tbsAlert beWarning;			with: [ 				html strong: 'No tienes favoritos!!'. 				html text: ' Because you are too hysterical ¬¬' 				].! !!FavouriteTLComponent methodsFor: 'private ' stamp: 'Euge 1/17/2016 02:47'!initializeParent: aFather	self initialize: (self session favourites) parent: aFather ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FavouriteTLComponent class	instanceVariableNames: ''!!FavouriteTLComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 02:33'!new: aFather	^self new initializeParent: aFather! !WAComponent subclass: #ProfileComponent	instanceVariableNames: 'list debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ProfileComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	list:		<Object>    Implementation Points!!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 14:15'!renderListOn: html	html div		id: 'lista';		class: 'tweet-list';		with: [ html render: list]! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/17/2016 00:47'!listHashtag: aHashtag	list := HashtagListComponent new: aHashtag parent: self.! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 03:13'!listUser: anUser	list := UserTLComponent new: anUser parent: self.! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/17/2016 03:14'!listUserHome: anUser	list := UserHomeTLComponent new: anUser parent: self.! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 14:14'!list: aCollection	list := TweetListComponent newList: aCollection.	list parent: self.! !!ProfileComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 14:33'!renderContentOn: html	html heading: 'profile Page'.	self renderListOn: html.	debug := self session user.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProfileComponent class	instanceVariableNames: ''!!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 01:44'!listUser: anUser	^self new listUser: anUser! !!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/16/2016 23:24'!listUserHome: anUser	^self new listUserHome: anUser! !!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 01:44'!listHashtag: aHashtag	^self new listHashtag: aHashtag! !!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 12:55'!canBeRoot	^ true! !