WAComponent subclass: #TweetComponent	instanceVariableNames: 'tweet parent'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent: anObject	parent := anObject! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:27'!parent	^ parent! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet: anObject	tweet := anObject! !!TweetComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 20:52'!tweet	^ tweet! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 22:31'!renderUserOn: html	html anchor		callback: [ parent listUser: (self session user) ];		with: (self session user name).		html space.! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 21:27'!initialize	super initialize.	tweet := Tweet new.! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 22:36'!renderContentOn: html	html tbsPanel beInfo 		with: [ html tbsPanelHeading: 					[ html tbsPanelTitle level: 4; 						with: [ self renderOwnerOn: html. ].						html text: (self timeString).					 ].				html tbsPanelBody: [ 					html paragraph with: [ self renderTweetOn: html ].					].				html tbsPanelFooter: [ self renderOptionsOn: html. ]			].! !!TweetComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 14:56'!renderTweetOn: html	self tweet text substrings		do: [ :elem | 			elem first = $#				ifTrue: [ self renderHashtag: elem On: html ]				ifFalse: [ 					elem first = $@						ifTrue: [ self renderUser: elem On: html ]						ifFalse: [ self renderWord: elem On: html ] 					] 			].! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 20:24'!renderOwnerOn: html		html anchor		callback: [ parent listUser: (self tweet owner) ];		with: (self tweet owner name).		html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 22:53'!renderHashtag: aWord On: html		html anchor		callback: [ parent listHashtag: (Hashtag findOrCreate: aWord)  ];		with: aWord.		html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 15:49'!renderTimeOn: html	html		paragraph: [ 			html render: 'tweeteado el: '.			html render: 				self tweet timestamp day asString , '/' ,				self tweet timestamp month asString, '/' ,				self tweet timestamp year asString.			html render: ' a las: ',				self tweet timestamp hour asString, ':' ,				self tweet timestamp minute asString, ':' ,				self tweet timestamp second asString.			html render: ' (hace '.			html render:					(self tweet timestamp - DateAndTime current						roundTo: (Duration seconds: 1)					) negated humanReadablePrintString.			html render: ' )' ]! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 22:36'!timeString	^	'tweeteado el: ',				self tweet timestamp day asString , '/' ,				self tweet timestamp month asString, '/' ,				self tweet timestamp year asString,	' a las: ',				self tweet timestamp hour asString, ':' ,				self tweet timestamp minute asString, ':' ,				self tweet timestamp second asString,	' ( hace ',		(self tweet timestamp - DateAndTime current						roundTo: (Duration seconds: 1)					) negated humanReadablePrintString,	 ' )'! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 22:51'!renderOptionsOn: html	html tbsForm class:'center-block';	with: [ 		html tbsButtonGroup: [ 			html tbsButton 			callback: [ 	];			with: [				html tbsGlyphIcon perform: #iconShareAlt. 				html space. 				html text: 'Responder'.			].				html tbsButton 			callback: [ 	];			with: [				html tbsGlyphIcon perform: #iconRetweet. 				html space. 				html text: 'Retweet'.			].			html tbsButton 			callback: [ 	];			with: [				(self session user favourites includes: (self tweet))					ifTrue:[ html tbsGlyphIcon perform: #iconHeart. ]					ifFalse:[ html tbsGlyphIcon perform: #iconHeartEmpty. ].				html space. 				html text: 'Favourite'.			].		].	].! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 01:15'!renderWord: aWord On: html	html text: aWord.	html space.! !!TweetComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 20:22'!renderUser: aWord On: html		html anchor		callback: [ parent listUser: (User find: aWord) ];		with: aWord.		html space.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetComponent class	instanceVariableNames: ''!!TweetComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:28'!newFrom: aTweet parent: aFather	|aux|	aux:= self new.	aux tweet: aTweet.	aux parent: aFather.	^aux.	! !Object subclass: #User	instanceVariableNames: 'name password tweets retweets favourites friends'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	favourites:		<Object>	friends:		<Object>	name:		<Object>	pass:		<Object>	retweets:		<Object>	tweets:		<Object>    Implementation Points!!User methodsFor: 'accessing' stamp: 'Euge 1/7/2016 00:44'!friends: anObject	^ friends := anObject! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!favourites	^ favourites! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!friends	^ friends! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!tweets	^ tweets! !!User methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:30'!retweets	^ retweets! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/7/2016 20:00'!initialize	tweets := SortedCollection sortBlock:[ :e1 :e2 | e1 timestamp > e2 timestamp ].	favourites := OrderedCollection new.	retweets := OrderedCollection new.	friends := OrderedCollection new.! !!User methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:21'!password: aPass	password:= aPass! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/7/2016 20:07'!removeTweet: aTweet	self tweets remove: aTweet.	Tweet removeTweet: aTweet.! !!User methodsFor: 'accesing' stamp: 'Euge 1/7/2016 01:40'!addFriend: aFriend	debug:= 'se metio en el addfriend'.	friends addIfNotPresent: aFriend.	debug:= 'termino el add friend'.! !!User methodsFor: 'accesing' stamp: 'FirstnameLastname 1/6/2016 14:03'!addTweet: aTweet	self tweets add: aTweet.	aTweet store.! !!User methodsFor: 'accesing' stamp: 'Euge 1/7/2016 00:30'!hasFriend: aFriend	^friends anySatisfy: [ :each | each name = aFriend].! !!User methodsFor: 'accesing' stamp: 'Euge 12/31/2015 21:10'!password	^password! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name: aName	name:= aName! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name	^name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: 'users'!!User class methodsFor: 'session management' stamp: 'FirstnameLastname 1/7/2016 16:53'!validateUserName: aName	^ aName matchesRegexIgnoringCase: '@(\w|_|-|\.|!!|\?|¡|¿)+'! !!User class methodsFor: 'session management' stamp: 'FirstnameLastname 1/7/2016 16:40'!validateUserName: aName andPass: aPass	^self users anySatisfy: [ :each | each name = aName and: [ each password = aPass ] ].! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:57'!userNameExist: anUserName	^ self users anySatisfy: [ 				:unUsuario | anUserName = unUsuario name and: [ self validateUserName: anUserName ] ]! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:37'!find: aName	(self userNameExist: aName) 		ifTrue:[ ^(users select:[:user | user name = aName ]) first ] 		ifFalse: [ ^false ]! !!User class methodsFor: 'adding/removing users' stamp: 'Euge 1/7/2016 00:14'!searchFriend: aFriend  ^ users select: [ :each | each name matchesRegexIgnoringCase: ( '(.*', aFriend , '.*)+' ) ].! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 16:58'!userExist: anUser	^ self userNameExist: anUser name.! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/7/2016 17:40'!addUser: anUser	((self userExist: anUser)not and:[ self validateUserName: anUser name ]) 			ifTrue: [ users add: anUser. ^true ]			ifFalse:[ ^false ]! !!User class methodsFor: 'adding/removing users' stamp: 'FirstnameLastname 1/6/2016 13:49'!removeUser: anUser	^((self userExist: anUser) ifFalse: [users remove: anUser]).! !!User class methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:24'!users	users ifNil: [ 		users:= OrderedCollection new.				].	^users.! !!User class methodsFor: 'accesing' stamp: 'FirstnameLastname 1/7/2016 19:57'!reset	users ifNotNil: [ users:= nil ].! !WAComponent subclass: #TweetFormComponent	instanceVariableNames: 'tweet'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetFormComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	tweet:		<Object>    Implementation Points!!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:37'!renderUserOn: html	html tbsLabel beInfo;		with: (self session user name)! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:11'!initialize	super initialize.	tweet := Tweet new.	tweet owner: self session user.! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:31'!renderContentOn: html	html tbsModal id: 'tweetear'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Tweeteate algo...'								 ].				html tbsModalBody: [ 					html form: [ 						self renderUserOn: html.						self renderTweetOn: html.						self renderSubmitButtonOn: html.					]. 				].			]		]		].! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:49'!renderTweetOn: html	html tbsFormGroup with: [		html label for: 'InputText'; class: 'sr-only'; with: 'Texto: '.		html tbsInputGroup class:'col-xs-12';			with: [ 			html textInput tbsFormControl; required;				id: 'InputText'; 				placeholder: 'Tweet';				maxLength: '140';				callback: [ :value | tweet text: value. ].			].		html small: 'máximo 140 caracteres' .		html space].! !!TweetFormComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:55'!renderSubmitButtonOn: html	html tbsButton bePrimary; class:'center-block';		callback: [ self session user addTweet: tweet. ];		with: 'Tweet nigga!!'.	html tbsButton beWarning; beExtraSmall; class:'center-block';		type: 'reset';		with: 'Borrar texto'.! !WAComponent subclass: #ListComponent	instanceVariableNames: 'list listComponent parent debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	list:		<Object>	parent:		<Object>    Implementation Points!!ListComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 02:25'!renderContentOn: html	self renderListaOn: html.! !!ListComponent methodsFor: 'rendering' stamp: 'Euge 1/6/2016 17:40'!newComponent:each	^self subclassResponsibility ! !!ListComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 02:29'!renderListaOn: html		listComponent		do: [ :each | html render: each ].! !!ListComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 02:30'!childrens	^ Array with: listComponent.! !!ListComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:36'!parent	^parent! !!ListComponent methodsFor: 'accessing' stamp: 'Euge 1/7/2016 02:28'!initialize	super initialize.	list := OrderedCollection new.	listComponent := OrderedCollection new.	list do: [ :each | listComponent add: (self newComponent: each) ] .	! !!ListComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 23:58'!list	^list! !!ListComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:36'!parent: anObject	parent := anObject! !!ListComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:36'!list: anObject 	list := anObject.! !WASession subclass: #SessionComponent	instanceVariableNames: 'user'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SessionComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	user:		<Object>    Implementation Points!!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user	^ user! !!SessionComponent methodsFor: 'accessing' stamp: 'Euge 12/31/2015 19:57'!user: anUser	user := anUser! !WAComponent subclass: #ProfileComponent	instanceVariableNames: 'list debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!ProfileComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	list:		<Object>    Implementation Points!!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 14:15'!renderListOn: html	html div		id: 'lista';		class: 'tweet-list';		with: [ html render: list]! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 12:47'!listHashtag: aHashtag	list := TweetListComponent newHashtag: aHashtag.	list parent: self.! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 12:47'!listUser: anUser	list := TweetListComponent newUser: anUser.	list parent: self.! !!ProfileComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 14:14'!list: aCollection	list := TweetListComponent newList: aCollection.	list parent: self.! !!ProfileComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 14:33'!renderContentOn: html	html heading: 'profile Page'.	self renderListOn: html.	debug := self session user.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProfileComponent class	instanceVariableNames: ''!!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 01:44'!listUser: anUser	^self new listUser: anUser! !!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 01:44'!listHashtag: aHashtag	^self new listHashtag: aHashtag! !!ProfileComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 12:55'!canBeRoot	^ true! !WAComponent subclass: #MainComponent	instanceVariableNames: 'mainArea menuArea debug modalArea1 modalArea2'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!MainComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	mainArea:		<Object>	menuArea:		<Object>    Implementation Points!!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:01'!renderModalAreaOn: html	html div		id: 'modalArea';		with: [ html render: modalArea1. html render: modalArea2. ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:39'!renderMainAreaOn: html	html div		id: 'mainArea';		class: 'seccion';		with: [ html render: mainArea ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:20'!renderPerfilOn: html	html form:[		html tbsNavbarButton tbsPullLeft;			callback: [ mainArea := ProfileComponent listUser: (self session user) ];			with: 'Perfil'.	].! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:12'!renderLoginOn: html		html tbsButtonGroup tbsPullRight;		with: [ 			html html: '<a data-toggle="modal" href="#registro">'.			html tbsNavbarButton tbsPullRight; beDefault;				callback: [ 	 ];				with: [					html tbsGlyphIcon perform: #iconListAlt. 					html space. 					html text:'Registrarse'.				].			html html:'</a>'.						html html: '<a data-toggle="modal" href="#login">'.			html tbsNavbarButton tbsPullRight; beDefault;				callback: [ 	 ];				with: [					html tbsGlyphIcon perform: #iconUser. 					html space. 					html text:'Login'.				].			html html:'</a>'.		].	modalArea1 := LoginComponent new.	modalArea2 := RegisterComponent new. ! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:42'!renderHeaderOn: html	html tbsPageHeader: [ html heading level:1; with: [ html text: 'Twitta' ] ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:48'!renderMenuOn: html	html tbsNavbar beDefault		id: 'barMenu';		class: 'seccion';		with: [ 			self session user 				ifNil: [ self renderNoSessionBarOn: html ]			 	ifNotNil: [ self renderSessionBarOn: html ] 				]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 00:54'!renderNoSessionBarOn: html	self renderHomeOn: html.	self renderLoginOn: html.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 01:56'!renderHomeOn: html	html tbsNavbarBrand		"url: 'index';"		with: [ 					html tbsGlyphIcon perform: #iconBullhorn.					html space. 					html text: 'Home' ]! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 02:29'!renderLogoutOn: html	html form: [		html tbsNavbarLink 		tbsPullRight; 		url: 'index';		"callback: [  ];"		with: [ 			html tbsGlyphIcon perform: #iconNewWindow.			html text: ' Logout' ].		].	html tbsNavbarText tbsPullRight 	with: [ 		html text: 'Logueado como '.   		html tbsNavbarLink: (self session user name)	].		! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 02:40'!renderSessionBarOn: html	self renderHomeOn: html.	self renderPerfilOn: html.	self renderTweetOn: html.	self renderLogoutOn: html.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:23'!renderTweetOn: html	html tbsForm:[			html html: '<a data-toggle="modal" href="#tweetear">'.			html tbsNavbarButton tbsPullLeft ; beDefault;				callback: [ 	];				with: [					html tbsGlyphIcon perform: #iconEdit. 					html space. 					html text: 'Tweetear'.				].			html html:'</a>'.	].	modalArea2 := TweetFormComponent new.! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/5/2016 17:44'!updateRoot: anHtmlRoot    super updateRoot: anHtmlRoot.    anHtmlRoot meta        name: 'viewport';        content: 'width=device-width, initial-scale=1.0'.	anHtmlRoot title: 'Twitter'! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 19:49'!children	^ Array with: mainArea! !!MainComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:07'!renderContentOn: html	html tbsContainer: [		self renderHeaderOn: html.		self renderMenuOn: html.		self renderMainAreaOn: html.		self renderModalAreaOn: html.	]! !!MainComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/7/2016 16:00'!initialize	super initialize.	modalArea1 := nil.	modalArea2 := nil.	menuArea := nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MainComponent class	instanceVariableNames: ''!!MainComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/28/2015 20:37'!canBeRoot	^ true! !ListComponent subclass: #TweetListComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!TweetListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TweetListComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 12:38'!parent: anObject	parent := anObject! !!TweetListComponent methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 12:40'!parent	^parent! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 20:48'!style	^'.offer-shape{		border-style: solid; 	border-width: 0 70px 40px 0; float:right; height: 0px; width: 0px;	-ms-transform:rotate(360deg); /* IE 9 */	-o-transform: rotate(360deg);  /* Opera 10.5 */	-webkit-transform:rotate(360deg); /* Safari and Chrome */	transform:rotate(360deg);}.offer {	background:#fff; 	border:1px solid #ddd; 	box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); 	margin: 15px 0; 	overflow:hidden;}.offer-rounded {	border-radius:7px;}.offer-danger {	border-color: #d9534f; }.offer-danger .offer-shape{	border-color: transparent #d9534f transparent transparent;	border-color: rgba(255,255,255,0) #d9534f rgba(255,255,255,0) rgba(255,255,255,0);}.offer-success {	border-color: #5cb85c; }	.offer-success .offer-shape{	border-color: transparent #5cb85c transparent transparent;	border-color: rgba(255,255,255,0) #5cb85c rgba(255,255,255,0) rgba(255,255,255,0);}.offer-default {	border-color: #999999; }	.offer-default .offer-shape{	border-color: transparent #999999 transparent transparent;	border-color: rgba(255,255,255,0) #999999 rgba(255,255,255,0) rgba(255,255,255,0);}.offer-primary {	border-color: #428bca; }.offer-primary .offer-shape{	border-color: transparent #428bca transparent transparent;	border-color: rgba(255,255,255,0) #428bca rgba(255,255,255,0) rgba(255,255,255,0);}.offer-info {	border-color: #5bc0de; }.offer-info .offer-shape{	border-color: transparent #5bc0de transparent transparent;	border-color: rgba(255,255,255,0) #5bc0de rgba(255,255,255,0) rgba(255,255,255,0);}.offer-warning {	border-color: #f0ad4e; }.offer-warning .offer-shape{	border-color: transparent #f0ad4e transparent transparent;	border-color: rgba(255,255,255,0) #f0ad4e rgba(255,255,255,0) rgba(255,255,255,0);}.offer-shape-text{	color:#fff; 	font-size:12px; 	font-weight:bold; 	position:relative; 	right:-40px; 	top:2px; 	white-space: nowrap;	-ms-transform:rotate(30deg); /* IE 9 */	-o-transform: rotate(360deg);  /* Opera 10.5 */	-webkit-transform:rotate(30deg); /* Safari and Chrome */	transform:rotate(30deg);}	.offer-content{	padding:0 20px 10px;}		'! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 12:44'!renderListaOn: html	list do:[ :each |		html div		class: 'tweet';		with: [ html render: (TweetComponent newFrom: each parent: (self parent) ) ].	]! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 12:48'!initialize	super initialize.	list := OrderedCollection new.! !!TweetListComponent methodsFor: 'rendering' stamp: 'Euge 1/6/2016 17:37'!newComponent: each	^ TweetComponent newFrom: each parent: self parent! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 14:32'!renderContentOn: html	self renderListaOn: html.! !!TweetListComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/6/2016 02:32'!list: anObject 	list := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TweetListComponent class	instanceVariableNames: ''!!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 13:41'!newHashtag: aHashtag	(aHashtag tweets isNotEmpty )		ifTrue:[ ^ self new list: (aHashtag tweets) ]		ifFalse:[ ^ HashtagDontExistComponent new ].! !!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 14:12'!newList: aCollection	^ self new list: aCollection ! !!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 05:05'!newUser: anUser	(User userExist: anUser)		ifTrue:[ ^ self new list: (anUser tweets) ]		ifFalse:[ ^ UserDontExistComponent new ].! !!TweetListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/28/2015 20:37'!canBeRoot	^ true! !TweetListComponent subclass: #UserDontExistComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!UserDontExistComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UserDontExistComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:40'!renderContentOn: html	html heading: 'Usuario inexistente'.! !Object subclass: #Tweet	instanceVariableNames: 'text owner hashtags timestamp'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!Tweet commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	hashtags:		<Object>	reference:		<Object>	text:		<Object>    Implementation Points!!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/7/2016 18:13'!linkHashtags	 | hashtag | self hashtags do:[:each |  each removeTweet: self]. self hashtagsNames  do: [ :each |    hashtag := Hashtag findOrCreate: each.   hashtag addTweet: self.   self hashtags add: hashtag ]! !!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/6/2016 05:09'!hashtagsNames	^ self text allRegexMatches: '#\w+'! !!Tweet methodsFor: 'private ' stamp: 'FirstnameLastname 1/5/2016 16:49'!parsehashtags	hashtags := self text allRegexMatches: '#\w+'.! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:17'!reference: anObject	reference := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner: anObject	owner := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/3/2016 21:17'!text	^ text! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!owner	^ owner! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 15:21'!initialize	text := ''.	hashtags := OrderedCollection new.	timestamp := DateAndTime current.! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 14:42'!timestamp	^ timestamp! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:07'!reference	^ self text allRegexMatches: '@\w+'! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 02:10'!ownerName	^ owner name! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:12'!hashtags	^ hashtags! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 13:52'!store	Tweet addTweet: self! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/5/2016 16:47'!hashtags: anObject	hashtags := anObject! !!Tweet methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:09'!text: anObject	text := anObject.	self linkHashtags.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tweet class	instanceVariableNames: 'tweets'!!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 19:54'!tweets	tweets ifNil: [ 		tweets:= SortedCollection sortBlock: [ :e1 :e2 | e1 timestamp > e2 timestamp ].			].	^tweets.! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 13:55'!addTweet: aTweet	self tweets add: aTweet! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 20:05'!reset	User users do:[ :user | 			user tweets do:[ :tweet | user removeTweet: tweet ].			 ] .	tweets ifNotNil: [ tweets := nil. ].! !!Tweet class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 13:48'!removeTweet: aTweet	tweets remove: aTweet! !WAComponent subclass: #FriendComponent	instanceVariableNames: 'model parent debug user session'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FriendComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>	parent:		<Object>    Implementation Points!!FriendComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 02:00'!renderContentOn: html	user := self session user.	html anchor 	callback: [user:= 'Pito'];			with: 'PITO'.	html heading: model name.	((self session user hasFriend: model name )or:(self session user name = model name)) ifFalse:[	html anchor 			with: 'Me BFF!!';			callback: [parent list: RegisterComponent new.] ]! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:13'!model	^ model! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:44'!parent	^ parent! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:44'!parent: anObject	parent := anObject! !!FriendComponent methodsFor: 'accessing' stamp: 'Euge 1/6/2016 17:13'!model: anObject	model := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FriendComponent class	instanceVariableNames: ''!!FriendComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 02:31'!new: aUser	|aux|		aux:= FriendComponent new.	aux model: aUser.	^aux! !!FriendComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/6/2016 17:45'!new: aUser parent: aFather	|aux|		aux:= FriendComponent new.	aux model: aUser.	aux parent: aFather.	^aux! !WAComponent subclass: #SearchFriendComponent	instanceVariableNames: 'model list'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!SearchFriendComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SearchFriendComponent methodsFor: 'initalize' stamp: 'Euge 1/7/2016 01:25'!initialize	super initialize.	model:= User new.	list:= FriendListComponent newRandomList:self.! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 02:33'!search		 list:= FriendListComponent new: (User searchFriend: model name).! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/6/2016 23:10'!renderContentOn: html	self renderSearch: html.	html render: list.! !!SearchFriendComponent methodsFor: 'rendering' stamp: 'Euge 1/7/2016 00:21'!renderSearch: html	html form:[	html		tbsFormGroup: [ 			html label				for: 'friendSearch';				with: 'R U alone?'.			html textInput				tbsFormControl;				id: 'friendSearchID';				placeholder: 'Enter a friend name';				callback: [ :value | model name: value ] ].	html tbsButton		bePrimary;		callback: [ self search ];		with: 'Find BFF!!'].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SearchFriendComponent class	instanceVariableNames: ''!!SearchFriendComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/6/2016 16:59'!canBeRoot	^ true! !TweetListComponent subclass: #HashtagDontExistComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!HashtagDontExistComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HashtagDontExistComponent methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 02:43'!renderContentOn: html	html heading: 'Hashtag inexistente'.! !WAComponent subclass: #LoginComponent	instanceVariableNames: 'model debug'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!LoginComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!LoginComponent methodsFor: 'initialize' stamp: 'FirstnameLastname 1/3/2016 20:55'!initialize		super initialize.	model := User new.	debug:= model.! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:06'!checkUser	^ User validateUserName: model name andPass: model password! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:29'!renderLoginOn: html	html tbsModal id: 'login'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Login'								 ].				html tbsModalBody: [ 					html tbsForm: [  							self renderNameOn: html;						renderPasswordOn: html;						renderSubmitButtonOn: html.					 ].				 ].				html tbsModalFooter:[					self renderRegisterOn: html.				 ].			]		]		].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 15:12'!renderSubmitButtonOn: html	html tbsButton bePrimary; class:'center-block';		callback: [ 	self loginUser. ];		with: 'Login'.! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:25'!renderContentOn: html	html tbsForm with: [		self renderLoginOn: html.	].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:29'!renderPasswordOn: html	html tbsFormGroup: [ 		html label for: 'InputPassword'; class: 'sr-only'; with: 'Contraseña'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconEyeClose ].				html passwordInput tbsFormControl id: 'InputPassword'; placeholder: 'Contraseña';required;					callback: [ :value | model password: value ].			].		html space.		]. ! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:32'!renderRegisterOn: html	html div		id: 'register';		class: 'seccion';		with: [ 					html text: 'no estas registrado?'.					html space.					html html: '<a data-toggle="modal" href="#registro">'.					html tbsButton beLink; beSmall;						callback: [ self call: RegisterComponent new];						with: 'Registrate'.					html html: '</a>'.				].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:07'!loginUser	self checkUser		ifTrue: [ self session user: (User find: (model name))]		ifFalse: [  debug:= 'fallo logueo']! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:09'!renderNameOn: html	html tbsFormGroup: [		html label for: 'InputUser'; class: 'sr-only'; with: 'Nombre de Usuario'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconUser].				html textInput tbsFormControl; id: 'InputUser'; placeholder: 'Usuario';required;					callback: [ :value | model name: ('@' , value) ].			].		html space].! !!LoginComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/3/2016 20:42'!style 	^ ''! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LoginComponent class	instanceVariableNames: ''!!LoginComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 12/27/2015 20:23'!canBeRoot	^ true! !ListComponent subclass: #FriendListComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!FriendListComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FriendListComponent methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 02:32'!newComponent: each	^ FriendComponent new: each ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FriendListComponent class	instanceVariableNames: ''!!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/6/2016 17:59'!new: aList		|aux|		aux:= FriendListComponent new.	aux list: aList.	^aux.! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 01:24'!newRandomList: aFather	|aux|		aux:= FriendListComponent new.	aux parent: aFather.	(10 min: User users size) timesRepeat: [ aux list addIfNotPresent: (User users at: (1 to: User users size)atRandom ) ].		^aux.! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 01:18'!new: aList parent: aFather		|aux|		aux:= FriendListComponent new.	aux list: aList.	aux parent: aFather.	^aux.! !!FriendListComponent class methodsFor: 'as yet unclassified' stamp: 'Euge 1/7/2016 00:06'!newRandomList	|aux|		aux:= FriendListComponent new.		(10 min: User users size) timesRepeat: [ aux list addIfNotPresent: (User users at: (1 to: User users size)atRandom ) ].		^aux.! !WAComponent subclass: #RegisterComponent	instanceVariableNames: 'model alert'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!RegisterComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!RegisterComponent methodsFor: 'initialize' stamp: 'Euge 12/30/2015 18:36'!initialize	super initialize.	model:= User new.! !!RegisterComponent methodsFor: 'validation' stamp: 'FirstnameLastname 1/7/2016 17:38'!submitUser	^(User addUser: model)! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 16:25'!renderContentOn: htmlhtml tbsModal id: 'registro'; with: [  		html tbsModalDialog: [			html tbsModalContent: [ 				html tbsModalHeader: [ 					html tbsModalCloseIcon.					html tbsModalTitle level: 4; with: 'Registro de usuario'								 ].				html tbsModalBody: [ 					html form: [ 						self renderNameOn: html.						self renderPasswordOn: html.						self renderSubmitButtonOn: html.					]. 				].			]		]		].! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 18:02'!renderSubmitButtonOn: html	html tbsButton beSuccess; class:'center-block';		callback: [ self submitUser ];		with: 'Registrarse'.! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:06'!renderNameOn: html	html tbsFormGroup: [		html label for: 'InputUser'; class: 'sr-only'; with: 'Nombre de Usuario'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconUser].				html textInput tbsFormControl; id: 'InputUser'; placeholder: 'Usuario';required;					callback: [ :value | model name: ( '@' , value) ].			].		html small: 'solo letras, números o caracteres ¿ ? _ - ¡ !! ' .		html space].! !!RegisterComponent methodsFor: 'rendering' stamp: 'FirstnameLastname 1/7/2016 17:29'!renderPasswordOn: html	html tbsFormGroup: [ 		html label for: 'InputPassword'; class: 'sr-only'; with: 'Contraseña'.		html tbsInputGroup: [ 			html tbsInputGroupAddOn: [				html tbsGlyphIcon perform: #iconEyeClose ].				html passwordInput tbsFormControl id: 'InputPassword'; placeholder: 'Contraseña';required;					callback: [ :value | model password: value ].			].		html space.		]. ! !Object subclass: #Hashtag	instanceVariableNames: 'tweets name'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!Hashtag commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Hashtag methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 04:59'!initialize	tweets := OrderedCollection new! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:01'!removeTweet: aTweet	tweets remove: aTweet.! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:01'!addTweet:aTweet	tweets add: aTweet.! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!name: anObject	name := anObject! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!name	^name! !!Hashtag methodsFor: 'accessing' stamp: 'FirstnameLastname 1/6/2016 05:00'!tweets	^ tweets! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hashtag class	instanceVariableNames: 'hashtags'!!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 04:50'!hashtagExist: aHashtagName	^ self hashtags anySatisfy: [ :hashtag | hashtag name = aHashtagName].! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 19:57'!reset	hashtags ifNotNil: [ hashtags := nil. ].! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 16:48'!findOrCreate: aHashtagName	| aux |	(self hashtagExist: (aHashtagName))		ifTrue: [ ^ (self hashtags select: [ :elem | elem name = aHashtagName ]) first]		ifFalse: [ 			aux := self new name: (aHashtagName).			self hashtags add: aux.			^ aux ] ! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/7/2016 16:46'!find: aHashtagName	(self hashtagExist: (aHashtagName))		ifTrue: [ ^ (self hashtags select: [ :elem | elem name = aHashtagName ]) first]		ifFalse: [ ^false ] ! !!Hashtag class methodsFor: 'as yet unclassified' stamp: 'FirstnameLastname 1/6/2016 05:24'!hashtags	hashtags ifNil: [ 		hashtags := OrderedCollection new.				].	^hashtags! !