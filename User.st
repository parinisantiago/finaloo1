'From Pharo4.0 of 18 March 2013 [Latest update: #40622] on 3 January 2016 at 4:33:53.214708 pm'!Object subclass: #User	instanceVariableNames: 'name password tweets retweets favourites friends'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	favourites:		<Object>	friends:		<Object>	name:		<Object>	pass:		<Object>	retweets:		<Object>	tweets:		<Object>    Implementation Points!!User methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:21'!password: aPass	password:= aPass! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name: aName	name:= aName! !!User methodsFor: 'accesing' stamp: 'Euge 12/28/2015 13:08'!name	^name! !!User methodsFor: 'accesing' stamp: 'Euge 12/31/2015 21:10'!password	^password! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: 'users'!!User class methodsFor: 'adding/removing users' stamp: 'Euge 1/3/2016 12:36'!userExist: anUser	^ self users anySatisfy: [ :unUsuario |anUser name = unUsuario name].! !!User class methodsFor: 'adding/removing users' stamp: 'Euge 1/3/2016 12:36'!addUser: aUser	^((self userExist: aUser) ifFalse: [users add: aUser]).! !!User class methodsFor: 'accesing' stamp: 'Euge 1/2/2016 23:24'!users	users ifNil: [ 		users:= OrderedCollection new.				].	^users.! !!User class methodsFor: 'session management' stamp: 'Euge 1/3/2016 15:17'!validateUserName: aName andPass: aPass	^self users anySatisfy: [ :each | each name=aName and: [ each password = aPass ] ].! !