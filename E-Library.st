SFriendsRecommendations subclass: #SFriendsRecommendationsByNewestBooks	instanceVariableNames: ''	classVariableNames: 'nueva variables'	poolDictionaries: ''	category: 'E-Library-Strategys'!!SFriendsRecommendationsByNewestBooks commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SFriendsRecommendationsByNewestBooks methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 13:42'!finalSortBlock	^ [ :e1 :e2 | e1 yearPublished > e2 yearPublished ]! !!SFriendsRecommendationsByNewestBooks methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 13:45'!leastSelectedTimes	^ user friends size / 2! !!SFriendsRecommendationsByNewestBooks methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 13:55'!selectBlock	^[ :rate | rate rating > 4 and: (self user friends includes: rate user) ]! !Item subclass: #Book	instanceVariableNames: 'ISBN ISBN13 additionalAuthors authorFirstName authorLastName averageRating binding numberOfPages originalPublicationYear publisher title yearPublished'	classVariableNames: ''	poolDictionaries: ''	category: 'E-Library-Core'!!Book commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!authorFirstName	^ authorFirstName! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!author	^ authorFirstName , ' ' , authorLastName ! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!averageRating: anObject	averageRating := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/11/2015 13:00'!yearPublished	^ yearPublished! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!additionalAuthors: anObject	additionalAuthors := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:25'!originalPublicationYear: anObject	originalPublicationYear := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/16/2015 00:34'!printOn: aStreamaStream nextPutAll: title; nextPutAll:'. By: '; nextPutAll: self author printString.! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:22'!iSBN13: anObject	ISBN13 := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:22'!iSBN	^ ISBN! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:22'!iSBN: anObject	ISBN := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!binding	^ binding! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/16/2015 00:14'!initialize	super initialize.	ISBN := 'N/A'.	ISBN13:= 'N/A'.	additionalAuthors:= OrderedCollection new.	authorFirstName:= 'N/A'.	authorLastName:= 'N/A'.	averageRating:= 'N/A'.	binding:= 'N/A'.	numberOfPages:= 'N/A'.	originalPublicationYear:= 'N/A'.	publisher:= 'N/A'.	title:= 'N/A'.	bookID:= 'N/A'.	yearPublished:= 'N/A'.	^self! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:25'!numberOfPages	^ numberOfPages! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!additionalAuthors	^ additionalAuthors! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:25'!numberOfPages: anObject	numberOfPages := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:26'!title: anObject	title := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!authorFirstName: anObject	authorFirstName := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:26'!publisher	^ publisher! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:22'!iSBN13	^ ISBN13! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!binding: anObject	binding := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:26'!publisher: anObject	publisher := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!authorLastName: anObject	authorLastName := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!authorLastName	^ authorLastName! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/11/2015 13:00'!yearPublished: anObject	yearPublished := anObject! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:25'!originalPublicationYear	^ originalPublicationYear! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:24'!averageRating	^ averageRating! !!Book methodsFor: 'accessing' stamp: 'AgusyEuge 6/4/2015 14:26'!title	^ title! !TestCase subclass: #BookTest	instanceVariableNames: 'book1 book2 book3'	classVariableNames: ''	poolDictionaries: ''	category: 'E-Library-Core'!!BookTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 16:54'!testAuthorLastName	self assert:( book1 authorLastName = 'Perez').	self deny:( book2 authorLastName = 'Juan').! !!BookTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 16:56'!testAverageRating	self assert:( book1 averageRating = 87.5 ).	self deny:( book2 averageRating = 87.5 ).! !!BookTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/16/2015 11:32'!setUpLibros	book1 := Book new.	book1		iSBN: 1234568654;		iSBN13: 127349347598698234;		authorFirstName: 'Juan';		authorLastName: 'Perez';		averageRating: 87.5 ;		binding: 'tapa dura';		numberOfPages: 34;		originalPublicationYear: 2000;		yearPublished:2000;		title: 'The cat is under the table';		localID: 11111.	book2 := Book new! !!BookTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 16:52'!testAuthorFirstName	self assert:( book1 authorFirstName = 'Juan').	self deny:( book2 authorFirstName = 'Juan').! !!BookTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 16:50'!setUp	self setUpLibros! !TestCase subclass: #ELibraryRecommenderTest	instanceVariableNames: 'book1 book2 book3 book4 book5 user1 user2 user3 user4 user5 user6 ratings ebookRecomender users books'	classVariableNames: ''	poolDictionaries: ''	category: 'E-Library-Core'!!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 20:01'!setUpUsers	users:= OrderedCollection new.	user1 := User new.	user1 		firstName: 'Carlos Julian Ignacio Alejandro Manuel Horacio Nicolas';		lastName: 'de los palotes'.	user2 := User new.	user2		firstName: 'Joaquin';		lastName: 'Fernandez'.	users add: user2.		user3 := User new.	user3		firstName: 'Roberto';		lastName: 'Martines'.	users add: user3.		user4 := User new.	user4		firstName: 'Juan' ;		lastName: 'Perez'.	users add: user4.	user1 addFriend: user2; addFriend: user3; addFriend: user4.	users add: user1.	! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 17:09'!setUpRatings	ratings:= OrderedCollection new.	"no debe ser recomendada,user1 la clasifico"	ratings add: (Rating new item: book1; rating: 8; user: user1).		ratings add: (Rating new item: book1; rating: 9; user: user2).	ratings add: (Rating new item: book1; rating: 8; user: user3).	ratings add: (Rating new item: book1; rating: 8; user: user5).	ratings add: (Rating new item: book1; rating: 8; user: user6).	"debe ser recomendada"	ratings add: (Rating new item: book2; rating: 10; user: user2).	ratings add: (Rating new item: book2; rating: 8; user: user4).	ratings add: (Rating new item: book2; rating: 9; user: user5).	"no debe ser recomandada"	ratings add: (Rating new item: book3; rating: 2; user: user2).		ratings add: (Rating new item: book3; rating: 1; user: user3).	ratings add: (Rating new item: book3; rating: 2; user: user5).	ratings add: (Rating new item: book3; rating: 2; user: user6).	"no debe ser recomendada"	ratings add: (Rating new item: book4; rating: 10; user: user4).	ratings add: (Rating new item: book4; rating: 2; user: user2).	"no debe ser recomendada"		ratings add: (Rating new item: book5; rating: 10; user: user2).! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/8/2015 21:25'!testTopTenMejorRecomendadas	| topTenMasEvaluadas |		ebookRecomender setStrategy: STopTenBestRecommended new.	topTenMasEvaluadas := ebookRecomender recommend.		self assert: (topTenMasEvaluadas at: 1) == book5.	self assert: (topTenMasEvaluadas at: 2) == book2.	self assert: (topTenMasEvaluadas at: 3) == book1.	self assert: (topTenMasEvaluadas at: 4) == book4.	self assert: (topTenMasEvaluadas at: 5) == book3! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/8/2015 21:32'!testObtenerRecomendacionesPara	| recomendaciones |	ebookRecomender setStrategy: (SFriendsRecommendationsByAverageRatings newForUser: user1).	recomendaciones :=  ebookRecomender recommend.		self assert: (recomendaciones includes: book2).	self deny: (recomendaciones includes: book1).	self shouldnt: [recomendaciones includes: book3].	self shouldnt: [recomendaciones includes: book4].	self shouldnt: [recomendaciones includes: book5].! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/11/2015 13:00'!setUpBooks	books:= OrderedCollection new.	book1 := Book new. "default".	books add: book1.		book2 := Book new.	book2 		iSBN: 1234568654;		authorFirstName: 'Juan';		authorLastName: 'Perez';		averageRating: 87.5 ;		binding: 'tapa dura';		numberOfPages: 34;		originalPublicationYear: 2000;		yearPublished:2000;		title: 'The cat is under the table'.			books add: book2.	book3 := Book new.	book3 		iSBN: 1754568654;		authorFirstName: 'delfi';		authorLastName: 'el delfin';		averageRating: 57.3 ;		binding: 'tapa dura';		numberOfPages: 34;		originalPublicationYear: 1700;		yearPublished:1970;		title: 'programacino en delphi' .	books add: book3.		book4 := Book new.	book4 		iSBN: 110101010110;		authorFirstName: 'E';		authorLastName: 'A';		averageRating: 97.5 ;		binding: 'tapa blanda';		numberOfPages: 5;		originalPublicationYear: 2015;		yearPublished:2015;		title: 'Objeciones Objetivas a Objetos objetosos'.		books add: book4.		book5 := Book new.	book5		iSBN: 14538905736;		authorFirstName: 'Khan';		authorLastName: '-';		averageRating: 27.5 ;		binding: 'tapa dura';		numberOfPages: 5;		originalPublicationYear: 0001;		yearPublished:1981;		title: 'mil formas de cocinar a milhouse!!'.		books add: book5.! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/8/2015 20:39'!testTopTenMasEvaluadas	| topTenMasEvaluadas |		ebookRecomender setStrategy: STopMostTimesEvaluated new.	topTenMasEvaluadas := ebookRecomender recommend.		self assert: (topTenMasEvaluadas at: 1) == book1.	self assert: (topTenMasEvaluadas at: 2) == book3.	self assert: (topTenMasEvaluadas at: 3) == book2.	self assert: (topTenMasEvaluadas at: 4) == book4.	self assert: (topTenMasEvaluadas at: 5) == book5! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/8/2015 21:32'!testObtenerRecomendacionesParaMaximo	| recomendaciones |	ebookRecomender setStrategy: (SFriendsRecommendationsByAverageRatings newForUser: user1).	recomendaciones :=  ebookRecomender recommend.		self assert: (recomendaciones includes: book2).	self assert: recomendaciones size <= 4.	self deny: (recomendaciones includes: book1).	self shouldnt: [recomendaciones includes: book3].	self shouldnt: [recomendaciones includes: book4].	self shouldnt: [recomendaciones includes: book5].! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 13:52'!testObtenerRecomendacionesMasNuevas	| recomendaciones |	ebookRecomender setStrategy: (SFriendsRecommendationsByNewestBooks newForUser: user1).	recomendaciones :=  ebookRecomender recommend.		self assert: (recomendaciones includes: book2).	self deny: (recomendaciones includes: book1).	self shouldnt: [recomendaciones includes: book3].	self shouldnt: [recomendaciones includes: book4].	self shouldnt: [recomendaciones includes: book5].! !!ELibraryRecommenderTest methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/4/2015 20:01'!setUp	self 	setUpBooks	setUpUsers	setUpRatings.	ebookRecomender := Administrator new.	ebookRecomender items: books;						users: users;						ratings: ratings.! !AdministratorItemReader subclass: #ELibraryItemReader	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'E-Library-Readers'!!ELibraryItemReader commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ELibraryItemReader methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/16/2015 00:27'!addElementFrom: readStream	| book bin |	book := Book new.	book localID: (readStream upTo: $,).	readStream next = $"		ifTrue: [			book title: (readStream upTo: $").			bin := readStream upTo: $, ]		ifFalse: [readStream back.  book title: (readStream upTo: $,) ].	bin := readStream upTo: $,.	readStream next = $"		ifTrue: [ self addAuthorFullName: (readStream upTo: $") for: book ].	bin := readStream upTo: $,.	readStream next = $"		ifTrue: [			self addAdditionalAuthors: (readStream upTo: $") for: book.			readStream upTo: $, ]		ifFalse: [ readStream back. book additionalAuthors add: (readStream upTo: $,) ].	book		iSBN: (readStream upTo: $,);		iSBN13: (readStream upTo: $,);		averageRating: (readStream upTo: $,).	readStream next = $"		ifTrue: [			book publisher: (readStream upTo: $").			bin := readStream upTo: $, ]		ifFalse: [ readStream back. book publisher: (readStream upTo: $,) ].	book		binding: (readStream upTo: $,);		numberOfPages: (readStream upTo: $,);		yearPublished: (readStream upTo: $,);		originalPublicationYear: (readStream upTo: Character lf).			elements at: book localID put: book! !!ELibraryItemReader methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 11:53'!addAuthorFullName: quotedString for: book	| coll |	coll:=quotedString substrings: ','.	book	authorLastName: (coll at: 1);	authorFirstName:  (coll at: 2).			! !!ELibraryItemReader methodsFor: 'as yet unclassified' stamp: 'AgusyEuge 6/15/2015 11:46'!addAdditionalAuthors: quotedString for: book			book additionalAuthors: (quotedString substrings: ',').! !