'From Pharo4.0 of 18 March 2013 [Latest update: #40622] on 3 January 2016 at 4:34:07.571708 pm'!WAComponent subclass: #RegisterComponent	instanceVariableNames: 'model'	classVariableNames: ''	poolDictionaries: ''	category: 'Seaside-Twitter'!!RegisterComponent commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	model:		<Object>    Implementation Points!!RegisterComponent methodsFor: 'initialize' stamp: 'Euge 12/30/2015 18:36'!initialize	super initialize.	model:= User new.! !!RegisterComponent methodsFor: 'validation' stamp: 'Euge 1/3/2016 12:56'!userValidation		(User addUser: model) ifNil: [  ] ifNotNil: [  ]! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:41'!renderSubmitButtonOn: html	html submitButton		callback: [ self userValidation ];		with: 'Register'.! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:38'!renderPasswordOn: html	html text: 'password:'.	html space.	html passwordInput callback: [ :value | model password: value ].	html break! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:39'!renderContentOn: html	html div		id: 'register';		class: 'seccion';		with: [ 			html form: [ 				self renderNameOn: html.				self renderPasswordOn: html.				self renderSubmitButtonOn: html. 			]. 		].! !!RegisterComponent methodsFor: 'rendering' stamp: 'Euge 1/3/2016 12:37'!renderNameOn: html	html text: 'name:'.	html space.	html textInput callback: [ :value | model name: value ].	html break! !